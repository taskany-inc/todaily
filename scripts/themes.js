/* eslint-disable global-require */
/* eslint-disable guard-for-in */
const { paramCase, camelCase } = require('change-case');
const { join, dirname } = require('path');
const { writeFile, mkdir } = require('fs');
const { promisify } = require('util');

const writeFileAsync = promisify(writeFile);
const mkdirpAsync = promisify(mkdir);
const writeToShadowDir = (file, content) =>
    mkdirpAsync(dirname(file), { recursive: true }).then(() => writeFileAsync(file, content, 'utf-8'));
const themesFolder = join(process.cwd(), 'src' , '@generated', 'themes');
const themes = {
    dark: require('../design/dark'),
    light: require('../design/light'),
};
const overrides = {
    dark: require('../.todaily/design/dark'),
    light: require('../.todaily/design/light'),
};

const jsToken = (token, value, { noVar }) =>
    `export const ${camelCase(token)} = '${noVar ? value.value : `var(--${paramCase(token)})`}';`;
const cssToken = (token, value, tabs = 8) => `${' '.repeat(tabs)}--${paramCase(token)}: ${value};\n`;

const jsTokensFile = (theme, file) => {
    const fileContent = ['// AUTOGENERATED CONTENT\n'];

    for (const token in theme) {
        fileContent.push(jsToken(token, theme[token], { noVar: theme[token].value !== undefined }));
        fileContent.push('\n');
    }

    fileContent[fileContent.length - 1] = '\r\n';

    return writeToShadowDir(file, fileContent.join(''));
};

const cssTokensFile = (theme, file, tabs = 4) => {
    const fileContent = [
        '// AUTOGENERATED CONTENT\n',
        "import { createGlobalStyle } from 'styled-components';\n\n",
        'export default createGlobalStyle`\n',
        `${' '.repeat(tabs)}:root {\n`,
    ];

    for (const token in theme) {
        if (!theme[token].value) fileContent.push(cssToken(token, theme[token]));
    }

    fileContent.push(`${' '.repeat(tabs)}}\n`);
    fileContent.push('`;\r\n');

    return writeToShadowDir(file, fileContent.join(''));
};

(async (t) => {
    const writers = [];

    for (const theme in t) {
        writers.push(cssTokensFile(t[theme], join(themesFolder, theme, 'index.ts')));
    }

    const tokensSchema = t[Object.keys(themes)[0]];
    writers.push(jsTokensFile(tokensSchema, join(themesFolder, 'index.ts')));

    await Promise.all(writers);
})({
    dark: {
        ...themes.dark,
        ...overrides.dark,
    },
    light: {
        ...themes.light,
        ...overrides.light,
    }
});
